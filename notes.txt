My submission for the URL shortener

My Timeline:
It was stated that a qualified candidate would complete this challenge in 2-4 hours.  I believe I took longer than 4 hours total, maybe closer to 6, however it was also broken up into multiple short sessions, so there was extra spin up / down / checkpointing overhead involved.

Submission:
This is an Elixir Umbrella app with a very simple react/formik ui page.  While I had originally planned to complete the Dockerfile and docker compose configuration for simpler testing, I cut myself off as a matter of time limit.  So unfortunately this must be run natively.

Requirements:
1 - This was developed using current elixir:
>  iex --version
>  Erlang/OTP 23 [erts-11.1.3] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:1] [hipe] [dtrace]
>
>  IEx 1.11.2 (compiled with Erlang/OTP 23)
2 - This application uses a postgres database, that for brevity should be already started on the same host as the application (developer docker setup) with the default credentials
>  docker ps
>  CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
>  ea4f08dc8b44        postgres:latest     "docker-entrypoint.sâ€¦"   8 months ago        Up 45 hours         0.0.0.0:5432->5432/tcp   postgres
3 - This has not been hardened for production mode, nor has `mix release` been enabled

Assumptions:
1 - a non-release/production submission is fine given the time estimates
2 - A 5Hz request rate is low enough to ignore caching and performance optimizations at this time

Testing Notes:
1 - SQL sandbox is used for unit tests against the url shortener functionality
2 - MOX mocking is used for unit tests against the web interface
3 - Javascript / ReactJS Module testing is absent


Please use the Makefile for building as described in the problem statement.


Next Steps (given more time)
1 - Implement a caching strategy, such as `Cachex`, to speed up repeated calls to the same shortened url (and reduce db load)
2 - release mode hardening and testing
3 - `mix release` deployment to a Docker container
4 - docker-compose local setup
5 - ReactJS simplify / refactor and introduce unit testing